
The exercise contains 3 mandatory tasks and one optional task.

About the exercise:
Language: You may solve it using: C++, C#, Python, Java/Kotlin, Javascript/Node/Typescript, PHP, Ruby. If you’d prefer to use a different language, please let us know before getting started.
Estimated resolution time: 5-7 hours (you don't need to solve it all at once).
Turn-in options:
Private GitHub code repository, then share it with tech.reviews@avature.net. This is our preferred method. 
Email it in a .zip file (to the same address). 
When completed please upload your solution to the following form.
Next Steps:
Once you've solved the exercise, you'll have a technical talk so you can explain your solution. This presentation will last 1.30-2 hours. We will discuss the following points:
Intro
A demo to explain how your solution works. 
Design
Describe your solution’s design.
What steps did you take to get there?
What other options did you consider and why did you pick that one?
Explain API design decisions, if applicable.
Development
What methodology did you use?
TDD – Explain testing and refactoring.
If you didn’t follow TDD, did you test the solution? How?
Following OOP good practices. E.g.: Modularity, SOLID.
We will also present extra challenges for the solution.
If you'd be so kind, I'd need you to please reply to this email with a proposed delivery date that we can expect for the project delivery, and also your availability for that week so that we can schedule the subsequent tech talk. 


Tools for the job
You have been asked to implement Jobberwocky, a service that works as a store for job opportunities,
where companies can share open positions.
Candidates and sourcers should be able to query for jobs using, for example, an optional pattern for the
job description. The resulting list should aggregate internal results with external sources, like LinkedIn or
GitHub Jobs.

1. Create a job posting service
Implement an application that exposes an API that let users register new job opportunities.
• The app does not need to persist info on an external database service.
• Feel free to store jobs in memory or disk (CSV, SQLite, etc).
• Choose any API style: web-based, REST, GraphQL, etc.

2. Create a job searching service
Extend your application to expose another endpoint that lets users find job opportunities from the
service you have already created.

3. Create additional sources
In addition to our internal job service, we want our job-searching service to consume data from
additional job opportunity sources using this service: jobberwocky-extra-source. Find the best way to
return a response that combines the results from more than one source.

4. Create a Job Alerts service (optional)
Update your application so that it lets candidates subscribe to an email address and be notified whenever
a new job is posted. An optional search pattern can be provided as a way to filter job posts.

Recommendations
If you choose to use a Github code repository, please make it private.

FAQs
• Do I need to create a UI?
o We will only assess the backend, but you can build one if you feel like it.
• Does the app require authentication?
o No, it doesn't.
• What fields should I use for each entity?
o As a developer, we expect that you design the proper structure of each entity, such as
the job or the subscription entities.
• Can I use an external framework?
o Yes, feel free to choose any framework that suits your needs.
• Which programming language should I use?
o You may use: C++, C#, Python, Java/Kotlin, Javascript/Node/Typescript, PHP, Ruby. If
you’d prefer to use a different language, please let us know before getting started.

• In what language should I program?
o English, please.